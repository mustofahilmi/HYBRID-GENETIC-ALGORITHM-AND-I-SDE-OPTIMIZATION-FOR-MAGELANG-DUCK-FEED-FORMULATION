# ==============================================================================
# HYBRID GENETIC ALGORITHM AND I-SDE+ OPTIMIZATION 
# FOR MAGELANG DUCK FEED FORMULATION: A COMPARATIVE ANALYSIS
# ==============================================================================
# Author: [Your Name]
# Institution: [Your Institution]
# Date: June 2025
# Purpose: Comparative study of Hybrid GA vs I-SDE+ for 
#          optimal Magelang duck feed formulation
# ==============================================================================

# Load required libraries
library(readxl)         # For reading Excel files
library(writexl)        # For writing Excel files
library(ggplot2)        # For advanced plotting
library(gridExtra)      # For arranging multiple plots
library(dplyr)          # For data manipulation
library(reshape2)       # For data reshaping
library(corrplot)       # For correlation visualization
library(RColorBrewer)   # For color palettes
library(plotly)         # For interactive plots
library(knitr)          # For report generation
library(kableExtra)     # For enhanced tables
library(nortest)        # For normality tests
library(car)            # For statistical diagnostics
library(parallel)       # For parallel processing
library(doParallel)     # For parallel backend
library(boot)           # For bootstrap methods
library(MASS)           # For robust statistics
library(forecast)       # For time series analysis
library(sensitivity)    # For sensitivity analysis
library(rgl)            # For 3D visualization
library(emoa)           # For multi-objective optimization
library(DT)             # For interactive tables
library(shiny)          # For interactive dashboard
library(shinydashboard) # For dashboard layout
library(psych)          # For descriptive statistics

# Set working directory and create output folders
if (!dir.exists("results")) dir.create("results")
if (!dir.exists("results/plots")) dir.create("results/plots")
if (!dir.exists("results/data")) dir.create("results/data")

# ==============================================================================
# 1. DATA INITIALIZATION AND PREPROCESSING
# ==============================================================================

# Magelang duck nutrient requirements (example data, adjust as needed)
duck_requirements <- data.frame(
  Nutrient = c("Crude_Protein", "ME", "Calcium", "Av_Phosphorus", 
               "Sodium", "Methionine", "Met_Cys", "Lysine", "Threonine", 
               "Tryptophan"),
  Starter = c(18.0, 2800, 1.0, 0.45, 0.15, 0.40, 0.75, 1.00, 0.70, 0.20),
  Grower = c(16.0, 2900, 0.9, 0.40, 0.15, 0.35, 0.65, 0.85, 0.60, 0.18),
  Layer = c(17.0, 2700, 3.5, 0.35, 0.15, 0.38, 0.70, 0.90, 0.65, 0.19),
  Min_Tolerance = c(0.95, 0.95, 0.90, 0.90, 0.80, 0.90, 0.90, 0.90, 0.90, 0.80),
  Max_Tolerance = c(1.20, 1.15, 2.00, 1.50, 1.50, 1.50, 1.50, 1.50, 1.50, 1.50)
)

# Feed ingredient composition (per 100g DM basis)
feed_ingredients <- data.frame(
  Ingredient = c("Yellow_Corn", "Rice_Bran", "Wheat_Bran", "Corn_Gluten_Meal", 
                 "Soybean_Meal", "Fish_Meal", "Palm_Oil", "DCP", "CaCO3", 
                 "NaCl", "Vitamin_Premix", "L_Lysine_HCl", "DL_Methionine"),
  DM = c(89, 91, 89, 90, 89, 92, 100, 89, 89, 89, 89, 89, 89),
  ME_kcal = c(3300, 1900, 1580, 3750, 2550, 2750, 8000, 0, 0, 0, 0, 0, 0),
  Crude_Protein = c(8.5, 13.0, 15.8, 60.0, 41.38, 47.32, 0, 0, 0, 0, 0, 0, 0),
  Fat = c(3.8, 5.0, 4.8, 2.51, 0.5, 2.0, 100, 0, 0, 0, 0, 0, 0),
  Crude_Fiber = c(2.5, 12.0, 10.4, 2.48, 3.0, 1.0, 0, 0, 0, 0, 0, 0, 0),
  Lysine = c(0.20, 0.51, 0.60, 0.90, 3.22, 5.28, 0, 0, 0, 0, 0, 100, 0),
  Methionine = c(0.20, 0.29, 0.10, 1.61, 0.72, 1.62, 0, 0, 0, 0, 0, 0, 80),
  Cystine = c(0.11, 0.11, 0.10, 0.91, 0.79, 1.10, 0, 0, 0, 0, 0, 0, 0),
  Met_Cys = c(0.31, 0.40, 0.20, 2.52, 1.51, 2.72, 0, 0, 0, 0, 0, 0, 80),
  Linoleic_Acid = c(1.9, 1.7, 1.7, 0.9, 0.4, 1.82, 0, 0, 0, 0, 0, 0, 0),
  Calcium = c(0.01, 0.06, 0.10, 0.10, 0.20, 6.50, 0, 22, 38, 0.3, 0, 0, 0),
  Phosphorus = c(0.13, 0.80, 0.65, 0.28, 0.33, 4.00, 0, 18.7, 0, 0, 0, 0, 0),
  Sodium = c(0.05, 0.10, 0.06, 0.10, 0.05, 0.47, 0, 0.06, 0, 39, 0, 0, 0),
  Chloride = c(0.05, 0.17, 0.30, 0.06, 0.05, 0.55, 0, 0.013, 0, 60, 0, 0, 0),
  Price_IDR_kg = c(5000, 2000, 3600, 15000, 13000, 5500, 13000, 14500, 5000, 6000, 23000, 50000, 31500),
  Min_Inclusion = c(20, 0, 0, 0, 15, 0, 0.5, 0, 0.5, 0.1, 0.5, 0, 0),
  Max_Inclusion = c(70, 15, 10, 15, 45, 8, 4, 3, 3, 0.5, 1.0, 1, 0.5)
)

# Convert percentages to decimal for calculations
n_ingredients <- nrow(feed_ingredients)

# ==============================================================================
# 2. OPTIMIZATION ALGORITHMS IMPLEMENTATION
# ==============================================================================

# Objective function: Multi-objective optimization (cost + penalty for constraint violations)
evaluate_formulation <- function(proportions, requirements, ingredients, stage = "Grower") {
  
  # Ensure proportions sum to 100%
  proportions <- proportions / sum(proportions) * 100
  
  # Calculate nutritional composition
  calculated_nutrition <- numeric(10)  # 10 nutrients
  
  calculated_nutrition[1] <- sum(proportions * ingredients$Crude_Protein / 100)  # Crude Protein
  calculated_nutrition[2] <- sum(proportions * ingredients$ME_kcal / 100)        # ME
  calculated_nutrition[3] <- sum(proportions * ingredients$Calcium / 100)       # Calcium
  calculated_nutrition[4] <- sum(proportions * ingredients$Phosphorus / 100)    # Available P
  calculated_nutrition[5] <- sum(proportions * ingredients$Sodium / 100)        # Sodium
  calculated_nutrition[6] <- sum(proportions * ingredients$Methionine / 100)    # Methionine
  calculated_nutrition[7] <- sum(proportions * ingredients$Met_Cys / 100)       # Met+Cys
  calculated_nutrition[8] <- sum(proportions * ingredients$Lysine / 100)        # Lysine
  calculated_nutrition[9] <- sum((proportions * ingredients$Crude_Protein * 0.75) / 100) # Threonine (est.)
  calculated_nutrition[10] <- sum((proportions * ingredients$Crude_Protein * 0.12) / 100) # Tryptophan (est.)
  
  # Calculate cost
  cost <- sum(proportions * ingredients$Price_IDR_kg / 100)
  
  # Get requirements for the specified stage
  req_values <- requirements[[stage]]
  min_req <- req_values * requirements$Min_Tolerance
  max_req <- req_values * requirements$Max_Tolerance
  
  # Calculate constraint violations
  penalty <- 0
  for (i in 1:10) {
    if (calculated_nutrition[i] < min_req[i]) {
      penalty <- penalty + (min_req[i] - calculated_nutrition[i])^2 * 1000
    }
    if (calculated_nutrition[i] > max_req[i]) {
      penalty <- penalty + (calculated_nutrition[i] - max_req[i])^2 * 1000
    }
  }
  
  # Check ingredient bounds
  for (i in 1:length(proportions)) {
    if (proportions[i] < ingredients$Min_Inclusion[i]) {
      penalty <- penalty + (ingredients$Min_Inclusion[i] - proportions[i])^2 * 100
    }
    if (proportions[i] > ingredients$Max_Inclusion[i]) {
      penalty <- penalty + (proportions[i] - ingredients$Max_Inclusion[i])^2 * 100
    }
  }
  
  # Multi-objective: minimize cost and constraint violations
  fitness <- cost + penalty
  
  return(list(
    fitness = fitness,
    cost = cost,
    penalty = penalty,
    nutrition = calculated_nutrition,
    proportions = proportions
  ))
}

# ==============================================================================
# 3. HYBRID GENETIC ALGORITHM (GA) IMPLEMENTATION
# ==============================================================================

hybrid_ga <- function(requirements, ingredients, stage = "Grower", 
                      population_size = 100, max_generations = 5000, 
                      crossover_rate = 0.8, mutation_rate = 0.1) {
  
  # Initialize population
  population <- matrix(runif(population_size * n_ingredients, 0, 10), 
                       nrow = population_size, ncol = n_ingredients)
  for (i in 1:population_size) {
    population[i, ] <- population[i, ] / sum(population[i, ]) * 100
  }
  
  # Evaluate initial population
  fitness <- sapply(1:population_size, function(i) 
    evaluate_formulation(population[i, ], requirements, ingredients, stage)$fitness)
  
  best_solution <- population[which.min(fitness), ]
  best_eval <- evaluate_formulation(best_solution, requirements, ingredients, stage)
  
  # Convergence tracking
  convergence_data <- data.frame(
    generation = integer(),
    best_fitness = numeric(),
    mean_fitness = numeric()
  )
  
  for (generation in 1:max_generations) {
    
    # Selection (tournament selection)
    new_population <- matrix(0, nrow = population_size, ncol = n_ingredients)
    for (i in 1:population_size) {
      tournament <- sample(1:population_size, 3)
      winner <- tournament[which.min(fitness[tournament])]
      new_population[i, ] <- population[winner, ]
    }
    
    # Crossover
    for (i in seq(1, population_size-1, 2)) {
      if (runif(1) < crossover_rate) {
        crossover_point <- sample(1:(n_ingredients-1), 1)
        temp <- new_population[i, (crossover_point+1):n_ingredients]
        new_population[i, (crossover_point+1):n_ingredients] <- 
          new_population[i+1, (crossover_point+1):n_ingredients]
        new_population[i+1, (crossover_point+1):n_ingredients] <- temp
        
        new_population[i, ] <- new_population[i, ] / sum(new_population[i, ]) * 100
        new_population[i+1, ] <- new_population[i+1, ] / sum(new_population[i+1, ]) * 100
      }
    }
    
    # Mutation
    for (i in 1:population_size) {
      if (runif(1) < mutation_rate) {
        mutation_idx <- sample(1:n_ingredients, 1)
        new_population[i, mutation_idx] <- new_population[i, mutation_idx] + rnorm(1, 0, 1)
        new_population[i, ] <- pmax(0, new_population[i, ])
        new_population[i, ] <- new_population[i, ] / sum(new_population[i, ]) * 100
      }
    }
    
    # Evaluate new population
    population <- new_population
    fitness <- sapply(1:population_size, function(i) 
      evaluate_formulation(population[i, ], requirements, ingredients, stage)$fitness)
    
    # Update best solution
    current_best_idx <- which.min(fitness)
    current_eval <- evaluate_formulation(population[current_best_idx, ], requirements, ingredients, stage)
    if (current_eval$fitness < best_eval$fitness) {
      best_solution <- population[current_best_idx, ]
      best_eval <- current_eval
    }
    
    # Record convergence
    if (generation %% 50 == 0) {
      convergence_data <- rbind(convergence_data, data.frame(
        generation = generation,
        best_fitness = best_eval$fitness,
        mean_fitness = mean(fitness)
      ))
    }
  }
  
  return(list(
    best_solution = best_solution,
    best_evaluation = best_eval,
    convergence_data = convergence_data,
    final_generation = max_generations,
    algorithm = "Hybrid_GA"
  ))
}

# ==============================================================================
# 4. I-SDE+ ALGORITHM IMPLEMENTATION
# ==============================================================================

isde_plus <- function(requirements, ingredients, stage = "Grower", 
                      population_size = 50, max_iterations = 5000, 
                      shift_factor = 0.5) {
  
  # Initialize population
  population <- matrix(runif(population_size * n_ingredients, 0, 10), 
                       nrow = population_size, ncol = n_ingredients)
  for (i in 1:population_size) {
    population[i, ] <- population[i, ] / sum(population[i, ]) * 100
  }
  
  # Evaluate initial population
  evaluations <- lapply(1:population_size, function(i) 
    evaluate_formulation(population[i, ], requirements, ingredients, stage))
  fitness <- sapply(evaluations, function(x) x$fitness)
  
  best_solution <- population[which.min(fitness), ]
  best_eval <- evaluations[[which.min(fitness)]]
  
  # Convergence tracking
  convergence_data <- data.frame(
    iteration = integer(),
    best_fitness = numeric(),
    mean_fitness = numeric()
  )
  
  for (iteration in 1:max_iterations) {
    
    # Calculate density estimation
    distances <- as.matrix(dist(population))
    densities <- apply(distances, 1, function(x) sum(exp(-x^2)))
    
    # Shift population towards better solutions
    elite_idx <- order(fitness)[1:5]  # Top 5 solutions
    for (i in 1:population_size) {
      if (!(i %in% elite_idx)) {
        shift_vector <- colMeans(population[elite_idx, ]) - population[i, ]
        population[i, ] <- population[i, ] + shift_factor * shift_vector
        population[i, ] <- pmax(0, population[i, ])
        population[i, ] <- population[i, ] / sum(population[i, ]) * 100
      }
    }
    
    # Evaluate new population
    evaluations <- lapply(1:population_size, function(i) 
      evaluate_formulation(population[i, ], requirements, ingredients, stage))
    fitness <- sapply(evaluations, function(x) x$fitness)
    
    # Update best solution
    current_best_idx <- which.min(fitness)
    current_eval <- evaluations[[current_best_idx]]
    if (current_eval$fitness < best_eval$fitness) {
      best_solution <- population[current_best_idx, ]
      best_eval <- current_eval
    }
    
    # Record convergence
    if (iteration %% 50 == 0) {
      convergence_data <- rbind(convergence_data, data.frame(
        iteration = iteration,
        best_fitness = best_eval$fitness,
        mean_fitness = mean(fitness)
      ))
    }
  }
  
  return(list(
    best_solution = best_solution,
    best_evaluation = best_eval,
    convergence_data = convergence_data,
    final_iteration = max_iterations,
    algorithm = "I-SDE+"
  ))
}

# ==============================================================================
# 5. EXPERIMENTAL DESIGN AND COMPARATIVE ANALYSIS
# ==============================================================================

run_comparative_study <- function(n_runs = 30, stages = c("Starter", "Grower", "Layer")) {
  
  cat("Starting comparative study with", n_runs, "independent runs...\n")
  
  all_results <- list()
  summary_statistics <- data.frame()
  
  for (stage in stages) {
    cat("\n=== Optimizing for", stage, "stage ===\n")
    
    stage_results <- list(
      Hybrid_GA = list(),
      ISDE_Plus = list()
    )
    
    # Run experiments
    for (run in 1:n_runs) {
      cat("Run", run, "of", n_runs, "\r")
      
      # Set seed for reproducibility
      set.seed(123 + run)
      
      # Hybrid GA
      ga_result <- hybrid_ga(duck_requirements, feed_ingredients, stage)
      stage_results$Hybrid_GA[[run]] <- ga_result
      
      # I-SDE+
      isde_result <- isde_plus(duck_requirements, feed_ingredients, stage)
      stage_results$ISDE_Plus[[run]] <- isde_result
    }
    
    all_results[[stage]] <- stage_results
    
    # Calculate summary statistics for this stage
    for (algorithm in c("Hybrid_GA", "ISDE_Plus")) {
      costs <- sapply(stage_results[[algorithm]], function(x) x$best_evaluation$cost)
      penalties <- sapply(stage_results[[algorithm]], function(x) x$best_evaluation$penalty)
      fitness_values <- sapply(stage_results[[algorithm]], function(x) x$best_evaluation$fitness)
      
      summary_statistics <- rbind(summary_statistics, data.frame(
        Stage = stage,
        Algorithm = algorithm,
        Mean_Cost = mean(costs),
        SD_Cost = sd(costs),
        Min_Cost = min(costs),
        Max_Cost = max(costs),
        Mean_Penalty = mean(penalties),
        SD_Penalty = sd(penalties),
        Mean_Fitness = mean(fitness_values),
        SD_Fitness = sd(fitness_values),
        Success_Rate = sum(penalties < 0.1) / n_runs * 100
      ))
    }
  }
  
  cat("\nComparative study completed!\n")
  
  return(list(
    results = all_results,
    summary = summary_statistics,
    n_runs = n_runs
  ))
}

# ==============================================================================
# 6. STATISTICAL ANALYSIS FUNCTIONS
# ==============================================================================

perform_statistical_analysis <- function(comparative_results) {
  
  cat("Performing statistical analysis...\n")
  
  statistical_results <- list()
  
  for (stage in names(comparative_results$results)) {
    
    stage_data <- comparative_results$results[[stage]]
    
    # Extract cost data for each algorithm
    ga_costs <- sapply(stage_data$Hybrid_GA, function(x) x$best_evaluation$cost)
    isde_costs <- sapply(stage_data$ISDE_Plus, function(x) x$best_evaluation$cost)
    
    # Normality tests
    ga_normality <- shapiro.test(ga_costs)$p.value
    isde_normality <- shapiro.test(isde_costs)$p.value
    
    # Variance homogeneity test
    cost_data <- data.frame(
      Cost = c(ga_costs, isde_costs),
      Algorithm = factor(rep(c("Hybrid_GA", "ISDE_Plus"), each = length(ga_costs)))
    )
    
    levene_test <- leveneTest(Cost ~ Algorithm, data = cost_data)
    
    # Choose appropriate statistical test
    if (min(ga_normality, isde_normality) > 0.05 && levene_test$`Pr(>F)`[1] > 0.05) {
      # T-test for parametric data
      t_test_result <- t.test(ga_costs, isde_costs)
      test_type <- "T-test"
      main_test <- t_test_result
      posthoc_test <- NULL
    } else {
      # Wilcoxon test for non-parametric data
      wilcox_result <- wilcox.test(ga_costs, isde_costs)
      test_type <- "Wilcoxon"
      main_test <- wilcox_result
      posthoc_test <- NULL
    }
    
    # Effect size calculation (Cohen's d for t-test, r for Wilcoxon)
    if (test_type == "T-test") {
      cohen_d <- (mean(ga_costs) - mean(isde_costs)) / pooled_sd(ga_costs, isde_costs)
      effect_size <- cohen_d
    } else {
      z <- qnorm(wilcox_result$p.value / 2)
      r <- abs(z) / sqrt(length(ga_costs) + length(isde_costs))
      effect_size <- r
    }
    
    statistical_results[[stage]] <- list(
      test_type = test_type,
      main_test = main_test,
      posthoc_test = posthoc_test,
      effect_size = effect_size,
      normality_tests = c(Hybrid_GA = ga_normality, ISDE_Plus = isde_normality),
      levene_test = levene_test
    )
  }
  
  return(statistical_results)
}

# Helper function for pooled standard deviation
pooled_sd <- function(x, y) {
  n1 <- length(x)
  n2 <- length(y)
  s1 <- sd(x)
  s2 <- sd(y)
  sqrt(((n1 - 1) * s1^2 + (n2 - 1) * s2^2) / (n1 + n2 - 2))
}

# ==============================================================================
# 7. VISUALIZATION FUNCTIONS
# ==============================================================================

create_comprehensive_plots <- function(comparative_results, statistical_results) {
  
  cat("Creating comprehensive visualizations...\n")
  
  # Color palette
  colors <- c("Hybrid_GA" = "#E31A1C", "ISDE_Plus" = "#1F78B4")
  
  plots_list <- list()
  
  # 1. Cost comparison boxplots
  cost_data <- data.frame()
  for (stage in names(comparative_results$results)) {
    stage_data <- comparative_results$results[[stage]]
    
    ga_costs <- sapply(stage_data$Hybrid_GA, function(x) x$best_evaluation$cost)
    isde_costs <- sapply(stage_data$ISDE_Plus, function(x) x$best_evaluation$cost)
    
    stage_cost_data <- data.frame(
      Stage = stage,
      Cost = c(ga_costs, isde_costs),
      Algorithm = factor(rep(c("Hybrid_GA", "ISDE_Plus"), each = length(ga_costs)))
    )
    
    cost_data <- rbind(cost_data, stage_cost_data)
  }
  
  p1 <- ggplot(cost_data, aes(x = Algorithm, y = Cost, fill = Algorithm)) +
    geom_boxplot(alpha = 0.7) +
    geom_jitter(width = 0.2, alpha = 0.5) +
    facet_wrap(~Stage, scales = "free_y") +
    scale_fill_manual(values = colors) +
    labs(title = "Feed Cost Optimization Performance Comparison",
         subtitle = "Distribution of optimal feed costs across 30 independent runs",
         x = "Optimization Algorithm",
         y = "Feed Cost (IDR/kg)",
         caption = "Lower values indicate better performance") +
    theme_minimal() +
    theme(
      plot.title = element_text(size = 14, face = "bold"),
      plot.subtitle = element_text(size = 12),
      strip.text = element_text(size = 12, face = "bold"),
      legend.position = "none"
    )
  
  plots_list[["cost_comparison"]] <- p1
  
  # 2. Convergence analysis
  convergence_data <- data.frame()
  for (stage in names(comparative_results$results)) {
    stage_data <- comparative_results$results[[stage]]
    
    for (algorithm in c("Hybrid_GA", "ISDE_Plus")) {
      max_length <- max(sapply(stage_data[[algorithm]], function(x) nrow(x$convergence_data)))
      convergence_matrix <- matrix(NA, nrow = max_length, ncol = length(stage_data[[algorithm]]))
      
      for (run in 1:length(stage_data[[algorithm]])) {
        conv_data <- stage_data[[algorithm]][[run]]$convergence_data
        values <- conv_data$best_fitness
        convergence_matrix[1:length(values), run] <- values
      }
      
      # Forward fill missing values
      for (col in 1:ncol(convergence_matrix)) {
        na_indices <- which(is.na(convergence_matrix[, col]))
        if (length(na_indices) > 0 && na_indices[1] > 1) {
          last_value <- convergence_matrix[na_indices[1] - 1, col]
          convergence_matrix[na_indices, col] <- last_value
        }
      }
      
      avg_fitness <- rowMeans(convergence_matrix, na.rm = TRUE)
      avg_convergence <- data.frame(
        iteration = 1:length(avg_fitness),
        best_fitness = avg_fitness
      )
      
      stage_convergence <- data.frame(
        Stage = stage,
        Algorithm = algorithm,
        Iteration = avg_convergence$iteration,
        Best_Fitness = avg_convergence$best_fitness
      )
      
      convergence_data <- rbind(convergence_data, stage_convergence)
    }
  }
  
  p2 <- ggplot(convergence_data, aes(x = Iteration, y = Best_Fitness, color = Algorithm)) +
    geom_line(size = 1.2, alpha = 0.8) +
    facet_wrap(~Stage, scales = "free") +
    scale_color_manual(values = colors) +
    labs(title = "Algorithm Convergence Comparison",
         subtitle = "Average best fitness evolution over iterations",
         x = "Iteration",
         y = "Best Fitness Value",
         color = "Algorithm") +
    theme_minimal() +
    theme(
      plot.title = element_text(size = 14, face = "bold"),
      plot.subtitle = element_text(size = 12),
      strip.text = element_text(size = 12, face = "bold")
    )
  
  plots_list[["convergence"]] <- p2
  
  # 3. Best formulation visualization
  best_formulations <- data.frame()
  for (stage in names(comparative_results$results)) {
    stage_data <- comparative_results$results[[stage]]
    
    for (algorithm in c("Hybrid_GA", "ISDE_Plus")) {
      best_run <- which.min(sapply(stage_data[[algorithm]], function(x) x$best_evaluation$cost))
      best_solution <- stage_data[[algorithm]][[best_run]]$best_solution
      
      formulation_data <- data.frame(
        Stage = stage,
        Algorithm = algorithm,
        Ingredient = feed_ingredients$Ingredient,
        Proportion = best_solution
      )
      
      best_formulations <- rbind(best_formulations, formulation_data)
    }
  }
  
  best_formulations_filtered <- best_formulations %>%
    filter(Proportion >= 0.5)
  
  p3 <- ggplot(best_formulations_filtered, aes(x = Ingredient, y = Proportion, fill = Algorithm)) +
    geom_bar(stat = "identity", position = "dodge", alpha = 0.8) +
    facet_wrap(~Stage, scales = "free_x") +
    scale_fill_manual(values = colors) +
    labs(title = "Optimal Feed Formulations Comparison",
         subtitle = "Best solutions from each algorithm (ingredients ≥0.5%)",
         x = "Feed Ingredient",
         y = "Inclusion Rate (%)",
         fill = "Algorithm") +
    theme_minimal() +
    theme(
      plot.title = element_text(size = 14, face = "bold"),
      plot.subtitle = element_text(size = 12),
      strip.text = element_text(size = 12, face = "bold"),
      axis.text.x = element_text(angle = 45, hjust = 1)
    )
  
  plots_list[["formulations"]] <- p3
  
  return(plots_list)
}

# ==============================================================================
# 8. RESULTS EXPORT FUNCTIONS
# ==============================================================================

export_results <- function(comparative_results, statistical_results, plots_list) {
  
  cat("Exporting results to files...\n")
  
  # 1. Export summary statistics to Excel
  wb_data <- list(
    "Summary_Statistics" = comparative_results$summary,
    "Algorithm_Parameters" = data.frame(
      Parameter = c("GA_Population_Size", "GA_Max_Generations", "GA_Crossover_Rate", "GA_Mutation_Rate",
                    "ISDE_Population_Size", "ISDE_Max_Iterations", "ISDE_Shift_Factor",
                    "Number_of_Runs"),
      Value = c(100, 5000, 0.8, 0.1, 50, 5000, 0.5, 30)
    )
  )
  
  # Add best formulations and nutritional analysis
  for (stage in names(comparative_results$results)) {
    stage_data <- comparative_results$results[[stage]]
    
    stage_formulations <- data.frame(Ingredient = feed_ingredients$Ingredient)
    nutrition_analysis <- data.frame(
      Nutrient = c("Crude_Protein", "ME_kcal_kg", "Calcium", "Av_Phosphorus", 
                   "Sodium", "Methionine", "Met_Cys", "Lysine", "Threonine", "Tryptophan"),
      Requirement = duck_requirements[[stage]],
      stringsAsFactors = FALSE
    )
    
    for (algorithm in c("Hybrid_GA", "ISDE_Plus")) {
      best_run <- which.min(sapply(stage_data[[algorithm]], function(x) x$best_evaluation$cost))
      best_solution <- stage_data[[algorithm]][[best_run]]$best_solution
      best_nutrition <- stage_data[[algorithm]][[best_run]]$best_evaluation$nutrition
      
      stage_formulations[[paste(algorithm, "_Proportion")]] <- round(best_solution, 3)
      nutrition_analysis[[paste(algorithm, "_Calculated")]] <- round(best_nutrition, 3)
      nutrition_analysis[[paste(algorithm, "_Adequacy")]] <- round(best_nutrition / duck_requirements[[stage]], 3)
    }
    
    wb_data[[paste("Best_Formulation", stage, sep = "_")]] <- stage_formulations
    wb_data[[paste("Nutrition_Analysis", stage, sep = "_")]] <- nutrition_analysis
  }
  
  # Add statistical test results
  for (stage in names(statistical_results)) {
    stat_result <- statistical_results[[stage]]
    
    stat_summary <- data.frame(
      Test_Type = stat_result$test_type,
      Effect_Size = round(stat_result$effect_size, 4),
      GA_Normality_p = round(stat_result$normality_tests["Hybrid_GA"], 4),
      ISDE_Normality_p = round(stat_result$normality_tests["ISDE_Plus"], 4),
      Levene_Test_p = round(stat_result$levene_test$`Pr(>F)`[1], 4)
    )
    
    wb_data[[paste("Statistical_Tests", stage, sep = "_")]] <- stat_summary
  }
  
  write_xlsx(wb_data, "results/data/Comparative_Analysis_Results.xlsx")
  
  # 2. Export detailed raw data
  raw_data <- list()
  for (stage in names(comparative_results$results)) {
    stage_data <- comparative_results$results[[stage]]
    
    for (algorithm in c("Hybrid_GA", "ISDE_Plus")) {
      algorithm_results <- data.frame(
        Run = 1:length(stage_data[[algorithm]]),
        Cost = sapply(stage_data[[algorithm]], function(x) x$best_evaluation$cost),
        Penalty = sapply(stage_data[[algorithm]], function(x) x$best_evaluation$penalty),
        Fitness = sapply(stage_data[[algorithm]], function(x) x$best_evaluation$fitness)
      )
      
      raw_data[[paste(stage, algorithm, sep = "_")]] <- algorithm_results
    }
  }
  
  write_xlsx(raw_data, "results/data/Raw_Optimization_Results.xlsx")
  
  # 3. Save plots
  ggsave("results/plots/Cost_Comparison.png", plots_list$cost_comparison, 
         width = 12, height = 8, dpi = 300)
  ggsave("results/plots/Convergence_Analysis.png", plots_list$convergence, 
         width = 12, height = 8, dpi = 300)
  ggsave("results/plots/Best_Formulations.png", plots_list$formulations, 
         width = 14, height = 10, dpi = 300)
  
  cat("Results exported successfully!\n")
}

# ==============================================================================
# 9. INTERPRETATION GUIDE
# ==============================================================================

generate_interpretation_guide <- function() {
  
  guide <- paste(
    "================================================================",
    "RESULTS INTERPRETATION GUIDE",
    "================================================================",
    "",
    "1. COST ANALYSIS",
    "- Mean Cost: Lower values indicate better economic performance",
    "- SD Cost: Lower values indicate higher consistency",
    "- Success Rate: >90% is excellent, 70-90% is acceptable",
    "",
    "2. CONVERGENCE ANALYSIS",
    "- Steep initial drop: Good exploration",
    "- Gradual improvement: Effective exploitation",
    "- Plateau: Potential convergence or need for tuning",
    "",
    "3. NUTRITIONAL ADEQUACY",
    "- Adequacy Ratio = Calculated Nutrient / Requirement",
    "- Ratio ≥ 1.0: Met requirement",
    "- Ratio 0.9-1.0: Acceptable",
    "- Ratio < 0.9: Deficiency risk",
    "",
    "4. ALGORITHM SELECTION",
    "- Hybrid_GA: High solution quality, robust to local optima",
    "- I-SDE+: Fast convergence, good for local optimization",
    "",
    "5. PUBLICATION STANDARDS",
    "- Report mean ± SD",
    "- Include effect sizes",
    "- Provide raw data and plots",
    "================================================================",
    sep = "\n"
  )
  
  writeLines(guide, "results/Interpretation_Guide.txt")
  cat("Interpretation guide generated: results/Interpretation_Guide.txt\n")
}

# ==============================================================================
# 10. MAIN EXECUTION FUNCTION
# ==============================================================================

main_analysis <- function() {
  
  cat("================================================================\n")
  cat("HYBRID GA-I-SDE+ MAGELANG DUCK FEED OPTIMIZATION ANALYSIS\n")
  cat("================================================================\n\n")
  
  start_time <- Sys.time()
  
  # Step 1: Run comparative study
  comparative_results <- run_comparative_study(n_runs = 30, 
                                               stages = c("Starter", "Grower", "Layer"))
  
  # Step 2: Perform statistical analysis
  statistical_results <- perform_statistical_analysis(comparative_results)
  
  # Step 3: Create visualizations
  plots_list <- create_comprehensive_plots(comparative_results, statistical_results)
  
  # Step 4: Export results
  export_results(comparative_results, statistical_results, plots_list)
  
  # Step 5: Generate interpretation guide
  generate_interpretation_guide()
  
  end_time <- Sys.time()
  execution_time <- difftime(end_time, start_time, units = "mins")
  
  cat("\n================================================================\n")
  cat("ANALYSIS COMPLETED SUCCESSFULLY!\n")
  cat("Total execution time:", round(execution_time, 2), "minutes\n")
  cat("================================================================\n")
  
  return(list(
    comparative_results = comparative_results,
    statistical_results = statistical_results,
    plots = plots_list,
    execution_time = execution_time
  ))
}

# Execute the main analysis
main_analysis()